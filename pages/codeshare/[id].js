import { useEffect, useState } from 'react'; import Layout from '@/components/Layout'; import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'; import * as theme from 'react-syntax-highlighter/dist/cjs/styles/prism'
export default function SnippetPage(){ const [snippet,setSnippet]=useState(null); const [commentText,setCommentText]=useState(''); const [profile,setProfile]=useState({}); useEffect(()=>{ const id = location.pathname.split('/').pop(); const local = JSON.parse(localStorage.getItem('snippets')||'[]'); fetch('/api/snippets').then(r=>r.json()).then(seed=>{ const removed = JSON.parse(localStorage.getItem('removedSeed')||'[]'); const all = [...seed.filter(s=>!removed.includes(s.id)), ...local]; let sn = all.find(s=>s.id===id); if(sn){ sn.views=(sn.views||0)+1; const idx = local.findIndex(l=>l.id===id); if(idx!==-1){ local[idx]=sn; localStorage.setItem('snippets',JSON.stringify(local)) } setSnippet(sn) } }).catch(()=>{ const sn = local.find(s=>s.id===id); if(sn) setSnippet(sn) }) setProfile(JSON.parse(localStorage.getItem('localProfiles')||'{}')) },[])
const copy=async()=>{ try{ await navigator.clipboard.writeText(snippet.code||''); alert('Copied!') }catch(e){ alert('Copy failed') } }
const like=()=>{ const list=JSON.parse(localStorage.getItem('snippets')||'[]'); const idx=list.findIndex(s=>s.id===snippet.id); if(idx!==-1){ list[idx].likes=(list[idx].likes||0)+1; localStorage.setItem('snippets',JSON.stringify(list)); setSnippet(list[idx]); return } setSnippet(prev=>({...prev, likes:(prev.likes||0)+1})) }
const postComment=(e)=>{ e.preventDefault(); const user = localStorage.getItem('user')||'guest'; const comment={author:user,text:commentText,time:new Date().toISOString()}; const local = JSON.parse(localStorage.getItem('snippets')||'[]'); const idx = local.findIndex(s=>s.id===snippet.id); if(idx!==-1){ local[idx].comments = local[idx].comments||[]; local[idx].comments.push(comment); localStorage.setItem('snippets',JSON.stringify(local)); setSnippet(local[idx]); setCommentText(''); return } // otherwise store comments separately
const commentsStore = JSON.parse(localStorage.getItem('comments')||'{}'); commentsStore[snippet.id]=commentsStore[snippet.id]||[]; commentsStore[snippet.id].push(comment); localStorage.setItem('comments',JSON.stringify(commentsStore)); setSnippet(prev=>({...prev, comments:[...(prev.comments||[]), comment]})); setCommentText('') }
return (<Layout>{!snippet? <div className='container py-12'>Snippet tidak ditemukan.</div>: <div className='container py-12 max-w-3xl'><div className='flex items-center justify-between'><div><h1 className='text-3xl font-bold'>{snippet.title}</h1><div className='text-sm text-gray-600'>by <span className='font-medium'>@{snippet.author}</span> {(()=>{ try{ const seed = JSON.parse(localStorage.getItem('seedUsers')||'[]'); const local = JSON.parse(localStorage.getItem('localUsers')||'[]'); const combined = seed.concat(local); const u = combined.find(x=>x.username===snippet.author); return u && u.verified ? <span className='ml-2 badge-verified'>✔</span> : null }catch(e){ return null } })()}</div></div><div className='text-sm text-gray-500'>👁️ {snippet.views||0}</div></div><div className='mt-4 text-sm text-gray-600 flex gap-4'><button onClick={like}>❤️ {snippet.likes||0}</button><button onClick={()=>{ const followers = JSON.parse(localStorage.getItem('followers')||'{}'); const me = localStorage.getItem('user')||'guest'; followers[snippet.author]=followers[snippet.author]||[]; if(!followers[snippet.author].includes(me)) followers[snippet.author].push(me); else followers[snippet.author]=followers[snippet.author].filter(x=>x!==me); localStorage.setItem('followers',JSON.stringify(followers)); alert('Follow updated') }}>👤 Follow</button></div><div className='mt-4 bg-black text-white rounded-2xl p-4 overflow-auto'><div className='flex justify-end mb-2'><button onClick={copy} className='btn btn-outline'>📋 Copy</button></div><SyntaxHighlighter language='javascript' style={theme.vscDarkPlus}>{snippet.code}</SyntaxHighlighter></div><div className='mt-8'><h2 className='text-xl font-semibold'>Comments</h2><div className='mt-4 space-y-4'>{(snippet.comments||[]).concat(JSON.parse(localStorage.getItem('comments')||'{}')[snippet.id]||[]).map((c,i)=>(<div key={i} className='flex gap-3'><img src={(JSON.parse(localStorage.getItem('localProfiles')||'[]').find(u=>u.username===c.author)||{}).avatar||'/default-avatar.png'} className='avatar' alt='pp'/><div><div className='text-sm font-semibold'>@{c.author} {(()=>{ const seed = JSON.parse(localStorage.getItem('seedUsers')||'[]'); const local = JSON.parse(localStorage.getItem('localUsers')||'[]'); const combined = seed.concat(local); const u = combined.find(x=>x.username===c.author); return u && u.verified ? <span className='ml-2 badge-verified'>✔</span> : null })()}</div><div className='text-sm text-gray-600'>{c.text}</div><div className='text-xs text-gray-400 mt-1'>{new Date(c.time).toLocaleString()}</div></div></div>))}</div><form onSubmit={postComment} className='mt-4'><textarea className='w-full border rounded-xl p-2' placeholder='Tulis komentar...' value={commentText} onChange={e=>setCommentText(e.target.value)}/><button className='btn btn-primary mt-2'>Kirim Komentar</button></form></div></div>}</Layout>) }
